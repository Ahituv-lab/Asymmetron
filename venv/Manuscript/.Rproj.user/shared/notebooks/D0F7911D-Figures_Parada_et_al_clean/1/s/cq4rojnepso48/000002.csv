"0","```r
#GO_Reactome <- fread(\"../Figures/New_Figure 5/STRING/GO/Whole_genome_background/Reactome Pathways.tsv\")




Axon_guidance <- unlist(strsplit(GO_Reactome[`term description`==\"Axon guidance\"]$`matching proteins in your network (labels)`, \",\"))
L1CAM_interactions <- unlist(strsplit(GO_Reactome[`term description`==\"L1CAM interactions\"]$`matching proteins in your network (labels)`, \",\"))
Protein_protein_interactions_at_synapses <- unlist(strsplit(GO_Reactome[`term description`==\"Protein-protein interactions at synapses\"]$`matching proteins in your network (labels)`, \",\"))
ER_to_Golgi_Anterograde_Transport <- unlist(strsplit(GO_Reactome[`term description`==\"ER to Golgi Anterograde Transport\"]$`matching proteins in your network (labels)`, \",\"))
Clathrin_mediated_endocytosis <- unlist(strsplit(GO_Reactome[`term description`==\"Clathrin-mediated endocytosis\"]$`matching proteins in your network (labels)`, \",\"))
Golgi_Associated_Vesicle_Biogenesis <- unlist(strsplit(GO_Reactome[`term description`==\"Golgi Associated Vesicle Biogenesis\"]$`matching proteins in your network (labels)`, \",\"))
Membrane_Trafficking <- unlist(strsplit(GO_Reactome[`term description`==\"Membrane Trafficking\"]$`matching proteins in your network (labels)`, \",\"))
Intra_Golgi_and_retrograde_Golgi_to_ER_traffic <- unlist(strsplit(GO_Reactome[`term description`==\"Intra-Golgi and retrograde Golgi-to-ER traffic\"]$`matching proteins in your network (labels)`, \",\"))

GOs <- list(Axon_guidance, L1CAM_interactions)

PPI_centrality_GO <- PPI_diff_age_HNMF[, c(\"mapped_gene\", \"exon_ID\", \"diff_age\",  \"betweenness\", \"eigen_centrality\", \"harmonic_centrality\", \"degree_centrality\", \"type\") ]

PPI_centrality_GO <-
  rbind(PPI_diff_age_HNMF[ mapped_gene %in% Axon_guidance, .(mapped_gene, exon_ID, diff_age,  betweenness, eigen_centrality, harmonic_centrality, degree_centrality, type, GO=var2str(Axon_guidance)) ],
PPI_diff_age_HNMF[ mapped_gene %in% L1CAM_interactions, .(mapped_gene, exon_ID, diff_age,  betweenness, eigen_centrality, harmonic_centrality, degree_centrality, type, GO=var2str(L1CAM_interactions)) ],
PPI_diff_age_HNMF[ mapped_gene %in% Protein_protein_interactions_at_synapses, .(mapped_gene, exon_ID, diff_age,  betweenness, eigen_centrality, harmonic_centrality, degree_centrality, type, GO=var2str(Protein_protein_interactions_at_synapses)) ],
PPI_diff_age_HNMF[ mapped_gene %in% ER_to_Golgi_Anterograde_Transport, .(mapped_gene, exon_ID, diff_age,  betweenness, eigen_centrality, harmonic_centrality, degree_centrality, type, GO=var2str(ER_to_Golgi_Anterograde_Transport)) ],
PPI_diff_age_HNMF[ mapped_gene %in% Clathrin_mediated_endocytosis, .(mapped_gene, exon_ID, diff_age,  betweenness, eigen_centrality, harmonic_centrality, degree_centrality, type, GO=var2str(Clathrin_mediated_endocytosis)) ],
PPI_diff_age_HNMF[ mapped_gene %in% Golgi_Associated_Vesicle_Biogenesis, .(mapped_gene, exon_ID, diff_age,  betweenness, eigen_centrality, harmonic_centrality, degree_centrality, type, GO=var2str(Golgi_Associated_Vesicle_Biogenesis)) ],
PPI_diff_age_HNMF[ mapped_gene %in% Membrane_Trafficking, .(mapped_gene, exon_ID, diff_age,  betweenness, eigen_centrality, harmonic_centrality, degree_centrality, type, GO=var2str(Membrane_Trafficking)) ],
PPI_diff_age_HNMF[ mapped_gene %in% Intra_Golgi_and_retrograde_Golgi_to_ER_traffic, .(mapped_gene, exon_ID, diff_age,  betweenness, eigen_centrality, harmonic_centrality, degree_centrality, type, GO=var2str(Intra_Golgi_and_retrograde_Golgi_to_ER_traffic)) ])







ggplot(PPI_centrality_GO, aes(GO, log(betweenness))) +
  geom_jitter() +
  geom_boxplot() +
  theme(axis.text.x = element_text(angle = 90, vjust = 0))


PPI_centrality_GO_gene_centered <- PPI_centrality_GO[ , .(diff_age=min(diff_age)) , by=c(\"mapped_gene\", \"betweenness\", \"eigen_centrality\", \"harmonic_centrality\", \"degree_centrality\", \"GO\")]


ggplot(PPI_centrality_GO_gene_centered ) +
  geom_jitter(aes(harmonic_centrality, diff_age, color=GO), width=0.5, height=0.1 ) +
   theme(axis.text.x = element_text(angle = 90), legend.position = \"top\", legend.direction = \"horizontal\")

```"
